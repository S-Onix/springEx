<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<mvc:annotation-driven />
	<!-- 
		annotation 기반 spring MVC 컨트롤러 프로그래밍 모델을 구성한다.
		org.springframework.web.servlet.config.annotation.EnableWebMvc 참조
		
		사용될 annotation을 인식해주는 역활
		직관적으로 명시적인 표현이다. 없어도 인식이 가능하다. 상징적인 역활
	 -->

	<mvc:default-servlet-handler />
	<!--
		Request Dispatcher 역활을 해준다.
		Servlet 컨테이너의 기본 Servlet으로 전달하여 정적 자원을 서비스하기위한 핸들러를 구성한다.
		핸들러의 경우 서블릿 컨테이너를 사용하면서 DispatcherServlet과 "/" 맵핑을 사용할 수 있으며
		모든 요청을 기본 Servlet으로 전달한다.
		
		web.xml에 설정된 front-servlet을 찾아가는 역활이다.
	 -->
	

	<mvc:view-resolvers>
		<mvc:jsp prefix="/WEB-INF/view/" />
	</mvc:view-resolvers>
	<!-- 
		컨트롤러에서 반환 된 뷰 이름을 실제 뷰로 변환하도록 ViewResolver 인스턴스 체인 구성
		랜더링에 사용하는 인스턴스 등록 된 모든 리졸버는 단일(합성) ViewResolver에 래핑된다.
		
		뷰를 생성해주는 역활을한다.
		뷰가 생성되어지면 해당 뷰를 response에서 service 단으로 던져주는 역활을 한다.
		
		이전에는 subfix 와 prefix로 나뉘어져서 사용되어 있었다. resolver에 대한 정보를 따로 만들어야 했었다.
		subfix : 확장명
		prefix : 사용경로
		
		뷰는 jsp의 이름과 확장명을 알고 있어야 한다.
		
		mvc:jsp => jsp 확장명을 가진 파일을 찾는다.
		prefix="url" => 경로를 나타낸다.
		
		해석 : url 경로의 jsp 확장명을 찾는다.
	 -->
	

</beans>
